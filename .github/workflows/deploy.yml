name: Release

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Get Version
        id: version
        run: |
          echo "VERSION=$(poetry version -s)" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check Version
        if: ${{ steps.version.outputs.VERSION != steps.version.outputs.TAG }}
        run: exit 1

  build:
    runs-on: ubuntu-latest
    needs: check-version
    permissions:
      contents: read
      packages: write
      id-token: write
    if: |-
      ${{
        always() &&
        (needs.check-version.result == 'success' || needs.check-version.result == 'skipped')
      }}
    strategy:
      fail-fast: true
      matrix:
        platform:
          - linux/amd64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Login into Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-shanghai.aliyuncs.com
          username: ${{ secrets.ALI_CR_USERNAME }}
          password: ${{ secrets.ALI_CR_PASSWORD }}

      - name: Generate Image Name and Scope
        id: image
        run: |
          REPO=registry.cn-shanghai.aliyuncs.com/prts/${{ github.event.repository.name }}
          echo "IMAGE=${REPO,,}" >> $GITHUB_OUTPUT
          echo "SCOPE=${{ env.GITHUB_REF_NAME }}-${{ matrix.platform }}" >> $GITHUB_OUTPUT

      - name: Generate Labels
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ${{ steps.image.outputs.IMAGE }}

      - name: Build and Publish
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha,scope=${{ steps.image.outputs.SCOPE }}
          cache-to: type=gha,scope=${{ steps.image.outputs.SCOPE }},mode=max
          outputs: type=image,name=${{ steps.image.outputs.IMAGE }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  push:
    runs-on: ubuntu-latest
    needs: build
    if: |-
      ${{
        always() &&
        github.event_name != 'pull_request'
      }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login into Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-shanghai.aliyuncs.com
          username: ${{ secrets.ALI_CR_USERNAME }}
          password: ${{ secrets.ALI_CR_PASSWORD }}

      - name: Generate Image Name
        id: image
        run: |
          REPO=registry.cn-shanghai.aliyuncs.com/prts/${{ github.event.repository.name }}
          echo "IMAGE=${REPO,,}" >> $GITHUB_OUTPUT

      - name: Generate Tags
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: |
            registry.cn-shanghai.aliyuncs.com/prts/${{ github.event.repository.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --dry-run $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.image.outputs.IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.image.outputs.IMAGE }}@sha256:%s ' *)

  deploy:
    runs-on: ubuntu-latest
    environment: official-deploy
    needs: push
    permissions:
      deployments: write
    if: |-
      ${{
        always() &&
        startsWith(github.ref, 'refs/tags/v')
      }}

    steps:
      - name: Start Deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: official-deploy

      - name: Update
        run: curl -X POST ${{ secrets.UPDATE_HOOK }}

      - name: update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
